/**

* Assignment for your lecture 2. Please finish all the questions under
* 'Assignment'. Please try the two questions under 'Bonus'. Please write some
* tests as practice. When you are writing tests, you should think about what
* situations might cause error? like 0,-1... The deadline of this assignment is
* 09/22/2016 23:59. Please feel free to contact me for any questions.
* 
* @author Jia
*/
	
class Person {
		int age;
		boolean gender;// false --> male, true --> female
	

		Person(int age, boolean gender) {
			this.age = age;
			this.gender = gender;
		}
	}
	

public class Assignment2 {
// Assignment
/**
* Write a Computer program to find the type of a person and print the type.
* Infant : If the age is less than 1 year 
* Toddler : If the age is less than 3 and greater than 1 
* Pre Schooler : If the age is less than 5 and greater than 3 
* KG Girl : If the age is greater than 5 and less than 6 and the gender is female
* KG Boy : If the age is greater than 5 and less than 6 And the gender is male
*/
class Person {
		int age;
		boolean gender;// false --> male, true --> female
	

		Person(int age, boolean gender) {
			this.age = age;
			this.gender = gender;
		}
	}

void getage(){
			if( age <1){
				System.out.println("Person is an Infant");
			}
			else if (age>1 && age<3){
					System.out.println("Person is a toddler");
				}
			else if (age>3 && age<5){
					System.out.println("Person is a Pre-schooler");
			}
			else  if (age>5 && age<=6 ){
				
				if (gender == false){
					System.out.println("Person is in KG and a male");
				}
				else {
					System.out.println("Person is in KG and female");
				}
				
			}
			else {
				System.out.println("The entry is invalid");
			}
		}

public static void main(String[] args){
Person P = new Person(6,false);
P.getage();
	}
}
	

/**
* Given an integer N as input, check the following: 
If N is odd, print "Weird". If N is even and, in between the range of 2 and 5(inclusive),
* print "Not Weird". If N is even and, in between the range of 6 and
* 20(inclusive), print "Weird". If N is even and N>20, print "Not Weird".
*/

		public void weirdNumber(int n) {
                   if(n%2!=0)                             //odd
                    {
                     System.out.println(“Weird”);
                    }
                    Else 
                    {
                    if(n>20 || (n>=2 && n<=5)
                    System.out.println(“ Not Weird”); 
                    else  
                    System.out.printn("Weird")  	            
                    } 
  }                   
	

/**
* Write a method to determine whether a number is prime
*/
		

public void isPrime(int n) {
        int i,temp; 
        for(i=2;i<=num/2;i++)
        {
         temp=num%i;
        if(temp==0)
        {
        isPrime=false;
        break;
 	}
        }
   }

/**
* Find N fibonacci numbers Fibonacci Number: f(N) = f(N-1)+f(N-2).
* Typically, f(0)=f(1)=1.
*/

public int[] fibonacciNumber(int n) {
	feb[0] = 0;
         feb[1] = 1;
         for(int i=2; i < n; i++)
         {
             feb[i] = feb[i-1] + feb[i-2];
         }
 
         for(int i=0; i< n; i++){
                 System.out.print(feb[i] + " ");
         }

                  
/**
* Write a function that takes a string as input and returns the string
* reversed. Given s = "hello", return "olleh".
*/
import java.util.*;

class ReverseString
{
   public static void main(String args[])
   {
      String ori, rev = "";
      Scanner in = new Scanner(System.in);
 
      System.out.println("Enter a string to reverse");
      ori = in.nextLine();
 
      int length = ori.length();
 
      for ( int i = length - 1 ; i >= 0 ; i-- )
         rev = rev + ori.charAt(i);
 
      System.out.println("Reverse of entered string is: "+rev);
   }
}
	
 
/**
* Given an array of nums, write a function to find the largest two integer.
*/
 
public class findTheLargestTwo {
 
    public void findTheLargestTwo(int[] nums){
        int maxOne = 0;
        int maxTwo = 0;
        for(int n:nums){
            if(maxOne < n){
                maxTwo = maxOne;
                maxOne =n;
            } else if(maxTwo < n){
                maxTwo = n;
            }
        }
        System.out.println("First Max Number: "+maxOne);
        System.out.println("Second Max Number: "+maxTwo);
    }
     
    public static void main(String a[]){
        int num[] = {5,34,78,2,45,1,99,23};
        findTheLargestTwo ftl = new findTheLargestTwo();
        ftl.printfindTheLargestTwo(num);
    }
}


/**
* Given an array nums, write a function to move all 0's to the end of it
* while maintaining the relative order of the non-zero elements. For
* example, given nums = [0, 1, 0, 3, 12], after calling your function, nums
* should be [1, 3, 12, 0, 0].
*/

import java.io.*;
 
class moveZero
{
  
    static void moveZerosToEnd(int num[], int n)
    {
        int count = 0;  
        for (int i = 0; i < n; i++)
            if (num[i] != 0)
                num[count++] = num[i]; 
        while (count < n)
            num[count++] = 0;
    }
 
    public static void main (String[] args)
    {
        int num[] = {1, 9, 8, 4, 0, 0, 2, 7, 0, 6, 0, 9};
        int n = num.length;
        moveZerosToEnd(num, n);
        System.out.println("The Array after pushing zeros to the back is : ");
        for (int i=0; i<n; i++)
            System.out.print(num[i]+" ");
    }
}

		
// Bonus
/**
* Given a non-negative integer n, repeatedly add all its digits until the
* result has only one digit. For example: Given n = 38, the process is
* like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.
*/

public static int addDigits(int num) {  
        if (num < 0) 
        {  
            return -1;  
        }  
        return 1 + ((num-1)%9);  
    }  
    public static void main(String[] args) {  
  
        int sum1 = addDigits(123456789);  
        if (sum1 != -1) {  
            System.out.println("Sum of digits is = "  
                    + sum1);  
        } else 
        {  
         System.out.println("Invalid Number");  
        }  
  
    }  
  
/**
* Write a program to check whether a given number is an ugly number. Ugly
* numbers are positive numbers whose prime factors only include 2, 3, 5.
* For example, 6, 8 are ugly, while 14 is not ugly since it includes
* another prime factor 7. Note that 1 is typically treated as an ugly
* number.
*/

public class UglyNumbers {
	
	public static boolean Ugly(int number) {
		if (number == 1) {
			return true;
		}
		
	for (int i = 2; i < number; i++) {
		if (number%i == 0) {
			if (i%2 != 0 && i%3 != 0 && i%5 != 0) {
				return false;
			}
		}
	}
	
	return true;
		
	}
	

	public static void main(String[] args) {
		
		System.out.println("14 is ugly: " + Ugly(14));
		System.out.println("9 is ugly: " + Ugly(9));
		System.out.println("100 is ugly: " + Ugly(100));
	}

}

